name: feature CI

on:
  workflow_dispatch:
  push:
    branches:
      - feature/*
    paths-ignore: 
      - 'README'
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/**'
      - '.github/actions/**'
      - 'Dockerfile'
      - 'Dockerfile.*'
      - 'docker-compose.yml'
      - 'docker-compose.*.yml'

run-name: v${{ github.run_number }}-r${{ github.run_attempt }}

jobs:
  build_and_test:
    env:
      RAW_COVERAGE_DIR: ./coverage
    name: build_and_test
    runs-on: ${{ vars.DEFAULT_RUNS_ON }}

    steps:
      - uses: btungut/devops/.github/actions/common@master
        id: common

      - uses: btungut/devops/.github/actions/git-checkout@master
        with:
          gitToken: ${{ secrets.GITHUB_TOKEN }}
      
      - name: dotnet_restore_and_build
        id: dotnet_restore_and_build
        shell: bash
        run: |
          set -euo pipefail
          dotnet restore
          dotnet build -c Release
        working-directory: app

        # run tests and publish cobertura report
      - name: dotnet_test
        id: dotnet_test
        shell: bash
        run: |
          set -euo pipefail
          dotnet test --collect:"XPlat Code Coverage" --results-directory ${RAW_COVERAGE_DIR} -c Release --no-build --no-restore --verbosity normal
        working-directory: app/tests

      - name: copy_coverage_files
        run: |
          set -euo pipefail

          pushd app/tests/${RAW_COVERAGE_DIR}
          find . -type f -name '*.xml' -exec cp {} ${TMP_DIR}/result.xml \; || { echo "No coverage file found"; exit 1; }
          popd
          
          echo "list of files in ${TMP_DIR}"
          ls -al ${TMP_DIR}
        env:
          TMP_DIR: ${{ runner.temp }}


      - name: irongut_coverage
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ${{ runner.temp }}/result.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: '50 75'
